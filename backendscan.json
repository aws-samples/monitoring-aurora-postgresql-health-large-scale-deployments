{
    "findings": [
        {
            "createdAt": "2024-04-17T11:10:40-04:00",
            "description": "User-provided inputs must be sanitized before they are logged. An attacker can use unsanitized input to break a log's integrity, forge log entries, or bypass log monitors.",
            "detectorId": "typescript/log-injection@v1.0",
            "detectorName": "Log injection",
            "detectorTags": [
                "data-integrity",
                "injection",
                "security",
                "owasp-top10",
                "cwe-117",
                "typescript"
            ],
            "generatorId": "AmazonCodeGuruSecurity",
            "id": "645194119b145113bb742c849595c4761e83156497dacbebf81d9f546876e631",
            "remediation": {
                "recommendation": {
                    "text": "We detected that unsanitized user data is being written to the logs. Unsanitized data can inject malicious content. To increase the security of your code, sanitize your inputs before logging them. \n\n[Learn more](https://cwe.mitre.org/data/definitions/117.html)",
                    "url": "https://docs.aws.amazon.com/codeguru/detector-library/typescript/log-injection"
                }
            },
            "resource": {
                "id": "backendscan"
            },
            "ruleId": "typescript-log-injection",
            "severity": "High",
            "status": "Closed",
            "title": "CWE-117 - Log injection",
            "type": "Software and Configuration Checks",
            "updatedAt": "2024-04-17T11:17:25.439000-04:00",
            "vulnerability": {
                "filePath": {
                    "codeSnippet": [
                        {
                            "content": "    });",
                            "number": 79
                        },
                        {
                            "content": "    return true;",
                            "number": 80
                        },
                        {
                            "content": "}",
                            "number": 81
                        },
                        {
                            "content": "",
                            "number": 82
                        },
                        {
                            "content": "export const iterateLogsOnASchedule: EventBridgeHandler<\"Dynamo Entry\", any, void> = async (event: EventBridgeEvent<any, any>) => {",
                            "number": 83
                        },
                        {
                            "content": "    console.log(event);",
                            "number": 84
                        },
                        {
                            "content": "    const numberOfHours: number = parseInt(process.env.NUMBER_OF_HOURS_TO_CAPTURE_DATA_FOR || '') || 1;",
                            "number": 85
                        },
                        {
                            "content": "    await iterateLogs(numberOfHours);",
                            "number": 86
                        },
                        {
                            "content": "}",
                            "number": 87
                        }
                    ],
                    "endLine": 84,
                    "name": "index.ts",
                    "path": "server/lib/lambda/index.ts",
                    "startLine": 84
                },
                "id": "645194119b145113bb742c849595c4761e83156497dacbebf81d9f546876e631",
                "referenceUrls": [],
                "relatedVulnerabilities": [
                    "CWE-117"
                ]
            }
        },
        {
            "createdAt": "2024-04-17T11:10:40-04:00",
            "description": "User-provided inputs must be sanitized before they are logged. An attacker can use unsanitized input to break a log's integrity, forge log entries, or bypass log monitors.",
            "detectorId": "typescript/log-injection@v1.0",
            "detectorName": "Log injection",
            "detectorTags": [
                "data-integrity",
                "injection",
                "security",
                "owasp-top10",
                "cwe-117",
                "typescript"
            ],
            "generatorId": "AmazonCodeGuruSecurity",
            "id": "c908b05ee9ee7e06547f4ca677d1f20b3175b28cb4b2ef08ad2cc7c2265a21db",
            "remediation": {
                "recommendation": {
                    "text": "We detected that unsanitized user data is being written to the logs. Unsanitized data can inject malicious content. To increase the security of your code, sanitize your inputs before logging them. \n\n[Learn more](https://cwe.mitre.org/data/definitions/117.html)",
                    "url": "https://docs.aws.amazon.com/codeguru/detector-library/typescript/log-injection"
                }
            },
            "resource": {
                "id": "backendscan"
            },
            "ruleId": "typescript-log-injection",
            "severity": "High",
            "status": "Closed",
            "title": "CWE-117 - Log injection",
            "type": "Software and Configuration Checks",
            "updatedAt": "2024-04-17T11:20:43.286000-04:00",
            "vulnerability": {
                "filePath": {
                    "codeSnippet": [
                        {
                            "content": "}",
                            "number": 77
                        },
                        {
                            "content": "",
                            "number": 78
                        },
                        {
                            "content": "",
                            "number": 79
                        },
                        {
                            "content": "// Lambda handler function",
                            "number": 80
                        },
                        {
                            "content": "export const handler = async (event: APIGatewayEvent) => {",
                            "number": 81
                        },
                        {
                            "content": "    console.log(event);",
                            "number": 82
                        },
                        {
                            "content": "    try {",
                            "number": 83
                        },
                        {
                            "content": "        if (event.path === \"/query-all-instances\") {",
                            "number": 84
                        },
                        {
                            "content": "            const uniqueValues = await scanTableAndExtractUniqueInstanceIds();",
                            "number": 85
                        },
                        {
                            "content": "            return {",
                            "number": 86
                        },
                        {
                            "content": "                statusCode: 200,",
                            "number": 87
                        }
                    ],
                    "endLine": 82,
                    "name": "querylambda.ts",
                    "path": "server/lib/lambda/querylambda.ts",
                    "startLine": 82
                },
                "id": "c908b05ee9ee7e06547f4ca677d1f20b3175b28cb4b2ef08ad2cc7c2265a21db",
                "referenceUrls": [],
                "relatedVulnerabilities": [
                    "CWE-117"
                ]
            }
        }
    ]
}
